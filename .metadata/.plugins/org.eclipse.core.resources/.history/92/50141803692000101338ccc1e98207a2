package com.ketan.fulzele.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.UUID;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ketan.fulzele.Bean.ProductBean;
import com.ketan.fulzele.Entity.ProductEntity;
import com.ketan.fulzele.Repo.ProductRepo;

@Service
public class ProductServiceImpl implements ProductService {

	@Autowired
	ProductRepo productRepo;


	@Override
	public List<ProductBean> listAllProducts() {
		List<ProductEntity> products = productRepo.findAll();
		List<ProductBean> productBeans = new ArrayList<ProductBean>();
		products.stream().forEach(product -> {
			ProductBean bean = new ProductBean();
			BeanUtils.copyProperties(product, bean);
			productBeans.add(bean);
		});
		return productBeans;
	}

	@Override
	public ProductBean createProduct(ProductBean productBean) {
		ProductEntity product = new ProductEntity();
		Integer imeiNumber = new Random().nextInt(100000);
		product.setProductId(imeiNumber);
		BeanUtils.copyProperties(productBean, product);
		productRepo.save(product);

		return productBean;
	}

	@Override
	public List<ProductBean> deleteProducts(List<Integer> list) {

		list.forEach(id -> {
			deleteAProduct(id);
		});

		return Optional.of(listAllProducts()).orElseGet(ArrayList::new);
	}

	@Override
	public void deleteAProduct(Integer productId) {
		ProductEntity product = productRepo.findById(productId).get();
		productRepo.delete(product);

	}

	@Override
	public ProductBean reserveProduct(int id, int desiredQauntity) {

		ProductEntity product = productRepo.findById(id).get();
		Integer productId = product.getProductId();
		int qauntity = product.getQuantity();
		if (product.getQuantity() > desiredQauntity) {
			qauntity -= desiredQauntity;
		} else {
			throw new RuntimeException("Desire qauntity of the product is not available in store");
		}
		product.setQuantity(qauntity);
		productRepo.save(product);

		ProductBean productBean = new ProductBean();
		BeanUtils.copyProperties(product, productBean);
		productBean.setQuantity(desiredQauntity);
		return productBean;
	}
//
//	@Override
//	public ProductBean resetProduct(int id, int resetQauntity) {
//		// TODO Auto-generated method stub
//		Product product = productRepo.findById(id).get();
//		String imei = product.getProductIMEI();
//
//		Qauntity q = qauntityRepo.findById(imei).get();
//		int qauntity = q.getQauntity();
//
//		qauntity += resetQauntity;
//		q.setQauntity(qauntity);
//		qauntityRepo.save(q);
//
//		ProductBean productBean = new ProductBean();
//		BeanUtils.copyProperties(product, productBean);
//		productBean.setQauntityResereved(resetQauntity);
//		productBean.setStatus("RESETTED");
//		return productBean;
//	}

}
